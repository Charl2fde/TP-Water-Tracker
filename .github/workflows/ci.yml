name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest
          fi

  unit-tests:
    name: Unit tests (fast)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install test deps
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pytest; fi
      
      # --- CORRECTION ICI : On ignore test_ui.py ---
      - name: Run unit tests (tolerate zero tests)
        shell: bash
        run: |
          set +e
          pytest \
            --ignore=tests/test_ui.py \
            --ignore=tests/test_integration.py \
            --ignore-glob='tests/test_integration_*.py' \
            -m "unit or (not integration and not ui)" \
            --maxfail=1 --disable-warnings
          code=$?
          if [ "$code" -eq 5 ]; then
            echo "✅ Aucun test unitaire collecté (OK pour l'instant)."
            exit 0
          fi
          exit "$code"

  integration-tests:
    name: All tests on PR (with Postgres)
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' }}
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: water
          POSTGRES_PASSWORD: water
          POSTGRES_DB: water
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U water -d water"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
    env:
      DB_HOST: 127.0.0.1
      DB_PORT: "5432"
      DB_NAME: water
      DB_USER: water
      DB_PASSWORD: water
      DATABASE_URL: postgresql://water:water@127.0.0.1:5432/water
      POSTGRES_USER: water
      POSTGRES_PASSWORD: water
      POSTGRES_DB: water
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install test deps
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pytest; fi
      - name: Run full test suite (PR)
        run: |
          pytest -q --disable-warnings

  ui-tests:
    name: UI tests with Selenium (main only)
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Installation de selenium pour ce job
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest selenium
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
      
      - name: Run UI tests
        run: pytest tests/test_ui.py

  deploy:
    name: Deploy (main only)
    runs-on: ubuntu-latest
    needs: [ui-tests]
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Build artifact (placeholder)
        run: |
          mkdir -p dist
          tar -czf dist/watertracker-${{ github.sha }}.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/